Einführung:

Eine Definition von Helmut Balzert beschreibt den Begriff als „eine strukturierte oder hierarchische Anordnung der Systemkomponenten sowie Beschreibung ihrer Beziehungen“. Die Architekturkomponenten bilden eine Zerlegung des Gesamtsystems, was bedeutet, dass jedes Softwareelement genau einer Architekturkomponente zugeordnet ist.

Paul Clements beschreibt Softwarearchitektur als „Strukturen eines Softwaresystems: Softwareteile, die Beziehungen zwischen diesen und die Eigenschaften der Softwareteile und ihrer Beziehungen“.

Die Softwarearchitektur ist Teil des Softwareentwurfs (siehe SWEBOK), innerhalb dessen sie als Grobgliederung der Komponenten entsteht. Während der Softwareentwurf sich auch auf lokale Aspekte innerhalb des architektonischen Rahmens der Software bezieht und deshalb sehr detailliert sein kann, ist die Softwarearchitektur eine globale Eigenschaft des Gesamtsystems. 

Architektursichten:
Perspektiven:

- Auf Grund der einseitigen Perspektive die jedem Architekturmodell innewohnt ist es nicht möglich ein System anhand einem einzigen Modell zu beschreiben.
Mögliche Perspektiven: Modulare Zerlegung, Laufzeitprozesse oder Netzwerkverteilung des Systems 

Verschiedene Perspektiven auf das System:

- 1 Die logische Sicht, welche die Hauptabstraktionen im System als Objekte oder
Objektklassen zeigt. Es sollte möglich sein, die Systemanforderungen mit den En-
titäten in dieser logischen Sicht zu verbinden.

- 2 Die Prozesssicht, die zur Laufzeit zeigt, wie sich das System aus interaktiven
Prozessen zusammensetzt. Diese Sicht ist bei der Beurteilung von nichtfunktionalen Systemeigenschaften wie Leistungsfähigkeit und Verfügbarkeit hilfreich.

- 3 Die Entwicklungssicht, die zeigt, wie die Software für die Entwicklung zerlegt
wird. Das heißt, es wird die Aufteilung der Software in Komponenten dargestellt,
die von einem einzelnen Entwickler oder einem Entwicklerteam implementiert
werden. Diese Sicht ist für Softwaremanager und Programmierer nützlich.

- 4 Die physische Sicht, welche die Systemhardware zeigt und darstellt, wie die
Softwarekomponenten über die Systemprozessoren verteilt sind. Diese Sicht ist
für Systementwickler bei der Planung der Systemverteilung nützlich.

- 5 Die Konzeptionelle Sicht ist nicht Teil des Sichtenmodells nach Krutchen, wurde jedoch später von Hofmeister hinzugefügt. Sie ist eine abstrakte Sicht auf das System,
die als Basis für die Zerlegung übergeordneter Anforderungen in ausführlichere Spezifikationen dienen kann. Mit ihrer Hilfe können Entwickler Entscheidungen über
wiederverwendbare Komponenten treffen.

Notationnen:

Die UML ist während des Entwurfsprozesses nicht sinnvoll, es sind die informelle Notationen vorzuziehen, die schneller zu schreiben sind und die
leicht auf einem Whiteboard aufgemalt werden können. UML ist am wertvollsten,
wenn eine Architektur detailliert dokumentiert werden soll oder wenn modellgetrie-
bene Entwicklung eingesetzt wird.

Architekturbeschreibungssprachen (Architectural Description Language, ADL) vorgeschlagen (Bass et al., 2003). Die Grundbestandteile von ADLs sind Komponenten und Konnektoren, außerdem
enthalten sie Regeln und Leitlinien für wohlgeformte Architekturen. Doch aufgrund ihres hohen Spezialisierungsgrades finden Bereichs- und Anwendungsspezialisten ADLs schwer zu verstehen und zu benutzen. Dadurch ist es schwierig, ihre Zweckmäßigkeit für praktisches Software-Engineering einzuschätzen. ADLs, die für einen bestimmten Anwendungsbereich (z. B. Automobilsysteme) entworfen wurden, könnten als Grundlage für modellgetriebene Entwicklung dienen.


Architekturmuster:

Man kann sich ein Architekturmuster als eine stilisierte, abstrakte Beschreibung einer empfohlenen Vorgehensweise vorstellen, die in unterschiedlichen Systemen und Umgebungen ausprobiert und getestet wurde. Ein Architekturmuster sollte also eine Systemorganisation beschreiben, die in vorhergehenden Systemen erfolgreich war.

MVC: Model-View-Controller-Muster (MVC, Modell-Präsentation-Steuerung). Dieses Muster ist die Grundlage der Interaktionsverwaltung vieler webbasierter Systeme. Die stilisierte Musterbeschreibung enthält den Musternamen, eine kurze Beschreibung (mit einem dazugehörigen grafischen
Modell) und ein Beispiel für die Systemart, wo das Muster eingesetzt wird (eventuell wieder mit einer grafischen Darstellung). Außerdem sollten Informationen darüber eingefügt werden, wann das Muster verwendet wird, sowie seine Vor- und Nachteile aufgeführt werden. Grafische Architekturmodelle, die mit MVC-Mustern verbunden sind, werden in Abbildung 2 und Abbildung 3 dargestellt.
Das MVC aus Abbildung 2 trennt die Elemente eines Systems, sodass sich diese unabhängig voneinan-
der verändern können.



